# frozen_string_literal: true

module BugsnagSourcemapUploader
  # Aggregates assets generated by Webpacker
  class WebpackerAssetRepository
    attr_reader :path

    # @param path [Pathname] the path where assets can be found
    # @return [WebpackerAssetRepository] the instance of this class
    def initialize(path)
      @path = path
    end

    # Aggregates every .js file in the path with its respective .js.map file
    #
    # @return [Array<AssetMetadata>] the list of aggregated JS and Sourcemap files.
    def assets_metadata
      scripts_by_prefix.each_with_object([]) do |(prefix, script), assets|
        unless source_maps_by_prefix.key?(prefix)
          Rails.logger.info("Found script without source map: #{script}")
          next
        end

        assets << AssetMetadata.new(script, source_maps_by_prefix[prefix])
      end
    end

    private

    def scripts
      @scripts ||= Dir.glob("#{path}/**/*.js")
    end

    def source_maps
      @source_maps ||= Dir.glob("#{path}/**/*.js.map")
    end

    def scripts_by_prefix
      @scripts_by_prefix ||= scripts.each_with_object({}) do |script, prefixes|
        match_data = script.match(/\A(.*)-[a-f0-9]{64}\.js\z/)
        next if match_data.nil?

        prefix = match_data[1]
        prefixes[prefix] = script
      end
    end

    def source_maps_by_prefix
      @source_maps_by_prefix ||= source_maps.each_with_object({}) do |source_map, prefixes|
        match_data = source_map.match(/\A(.*)-[a-f0-9]{64}\.js\.map\z/)
        next if match_data.nil?

        prefix = match_data[1]
        prefixes[prefix] = source_map
      end
    end

    ##
    # A Class with an instance that responds to methods required by BugsnagSourcemapUploader
    class AssetMetadata
      CDN_HOST_URL = 'https://cdn.sourcemap.com/bundles/'

      attr_reader :script_path, :source_map_path

      def initialize(script_path, source_map_path)
        @script_path = script_path
        @source_map_path = source_map_path
      end

      def script_name
        @script_name ||= File.basename(script_path)
      end

      def cdn_url
        @cdn_url ||= Addressable::URI
                     .parse(CDN_HOST_URL)
                     .join("#{parent_dir}/")
                     .join(script_name)
                     .to_s
      end

      private

      def parent_dir
        File.dirname(script_path).split('/').last
      end
    end
  end
end
